{"version":3,"file":"static/js/589.b84556e4.chunk.js","mappings":"wOAkBaA,EAAYC,EAAAA,GAAAA,IAAH,2DAKTC,EAAYD,EAAAA,GAAAA,IAAH,uCAITE,EAAUF,EAAAA,GAAAA,IAAH,kZAUE,SAAAG,GAAI,OA/BPC,EA+BsBD,EAAKC,OA9BrC,cAAW,aAAXA,EACIC,EACAC,EAFJ,KADU,IAAAF,CA+BO,IAQF,SAAAD,GAAI,OAjCNC,EAiCwBD,EAAKC,OAhC1C,cAAW,aAAXA,EACIG,EACAC,EAFJ,KADa,IAAAJ,CAiCM,IAIfK,EAAcT,EAAAA,GAAAA,IAAH,8D,SC1CXU,EAAa,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,SAAiC,IAAvBP,OAAAA,OAAuB,MAAd,QAAc,EAC5D,OACE,UAACL,EAAD,YACE,SAACE,EAAD,WACE,SAACC,EAAD,CAASE,OAAQA,OAEnB,SAACK,EAAD,UAAcE,MAGnB,C,8ECdYC,EAAS,SAAC,GAAmD,IAAjDD,EAAgD,EAAhDA,SAAUE,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,QAAgC,IAAvBC,SAAAA,OAAuB,SACvE,OACE,SAAC,IAAD,CAAWF,KAAMA,EAAMC,QAASA,EAASC,SAAUA,EAAnD,SACGJ,GAGN,C,8LCNYK,EAAgBhB,EAAAA,GAAAA,KAAH,0PAgBbiB,EAAajB,EAAAA,GAAAA,IAAH,mFAMVkB,EAAQlB,EAAAA,GAAAA,MAAH,sFAOLmB,EAAQnB,EAAAA,GAAAA,MAAH,iOAaJ,SAAAG,GAAI,OAAKA,EAAKiB,MAAQ,gBAAkB,iBAApC,IAILC,EAAoBrB,EAAAA,GAAAA,EAAH,2D,SCsC9B,EAtEkB,WAChB,IAAQsB,GAAUC,EAAAA,EAAAA,KAAVD,MAEFE,EAAcC,EAAAA,KAAaC,MAAM,CACrCC,MAAOF,EAAAA,KACJG,QAAQ,2CAA4C,CACnDC,QAAS,gBACTC,oBAAoB,IAErBC,SAAS,YACZC,SAAUP,EAAAA,KACPG,QAAQ,yCAA0C,CACjDC,QACE,uFACFC,oBAAoB,IAErBC,SAAS,cAGRE,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbR,MAAO,gBACPK,SAAU,YAEZI,iBAAkBZ,EAClBa,SAAS,WAAD,wBAAE,WAAMC,GAAN,oGAEAC,EAAAA,EAAAA,IAAWD,GAFX,gBACAE,EADA,EACAA,IAAKC,EADL,EACKA,KAAMd,EADX,EACWA,MAAOe,EADlB,EACkBA,MAAOC,EADzB,EACyBA,QAASC,EADlC,EACkCA,cAE1CtB,EAAMkB,EAAKC,EAAMd,EAAOe,EAAOC,EAASC,GAHhC,4CAAF,mDAAC,KAMX,OACE,SAAClC,EAAA,EAAD,CAAYN,OAAO,QAAnB,UACE,UAACY,EAAD,CAAeqB,SAAUJ,EAAOY,aAAhC,WACE,UAAC5B,EAAD,YACE,UAACC,EAAD,WAAO,SAEL,SAACC,EAAD,CACEN,KAAK,QACL4B,KAAK,QACLK,YAAY,mBACZC,MAAOd,EAAOK,OAAOX,MACrBqB,SAAUf,EAAOgB,aACjB7B,MAAOa,EAAOiB,OAAP,QAERjB,EAAOkB,QAAP,QACC,SAAC9B,EAAD,UAAoBY,EAAOiB,OAAP,YAGxB,UAAChC,EAAD,WAAO,YAEL,SAACC,EAAD,CACEN,KAAK,WACL4B,KAAK,WACLK,YAAY,2BACZC,MAAOd,EAAOK,OAAON,SACrBgB,SAAUf,EAAOgB,aACjB7B,MAAOa,EAAOiB,OAAP,WAERjB,EAAOkB,QAAP,WACC,SAAC9B,EAAD,UAAoBY,EAAOiB,OAAP,kBAI1B,SAACtC,EAAA,EAAD,CAAQC,KAAK,SAAb,SAAsB,eAI7B,C","sources":["components/AuthLayout/AuthLayout.styled.jsx","components/AuthLayout/AuthLayout.jsx","components/Button/Button.jsx","pages/LoginPage/LoginPage.styled.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport * as image from '../../images/login.png';\nimport * as image_reg from '../../images/register.png';\nimport * as bigImage from '../../images/login@2x.png';\nimport * as bigImage_reg from '../../images/register@2x.png';\n\nconst setBgImage = layout => {\n  return layout === 'register'\n    ? `url(${image_reg.default})`\n    : `url(${image.default})`;\n};\n\nconst setBigBgImage = layout => {\n  return layout === 'register'\n    ? `url(${bigImage_reg.default})`\n    : `url(${bigImage.default})`;\n};\n\nexport const Container = styled.div`\n  display: flex;\n  height: 100%;\n`;\n\nexport const BigColumn = styled.div`\n  width: 60%;\n`;\n\nexport const BgThumb = styled.div`\n  position: relative;\n  top: 50%;\n  transform: translateY(-50%);\n\n  margin: auto;\n\n  width: 70%;\n  height: 80%;\n\n  background-image: ${prop => setBgImage(prop.layout)};\n  background-size: contain;\n  background-position: center;\n  background-repeat: no-repeat;\n\n  @media (min-device-pixel-ratio: 2),\n    (min-resolution: 192dpi),\n    (min-resolution: 2dppx) {\n    background-image: ${prop => setBigBgImage(prop.layout)};\n  }\n`;\n\nexport const SmallColumn = styled.div`\n  width: 40%;\n  padding: 20px 30px;\n`;\n","import {\n  Container,\n  BigColumn,\n  SmallColumn,\n  BgThumb,\n} from './AuthLayout.styled';\n\nexport const AuthLayout = ({ children, layout = 'login' }) => {\n  return (\n    <Container>\n      <BigColumn>\n        <BgThumb layout={layout} />\n      </BigColumn>\n      <SmallColumn>{children}</SmallColumn>\n    </Container>\n  );\n};\n","import { StyledBtn } from './Button.styled';\n\nexport const Button = ({ children, type, onClick, isActive = false }) => {\n  return (\n    <StyledBtn type={type} onClick={onClick} isActive={isActive}>\n      {children}\n    </StyledBtn>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FormContainer = styled.form`\n  position: relative;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n\n  padding: 5% 10%;\n  border-radius: 20px;\n\n  background-color: #aac76f;\n`;\n\nexport const LabelThumb = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const Label = styled.label`\n  display: block;\n\n  font-weight: 600;\n  font-size: 18px;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  width: 100%;\n  border-radius: 10px;\n\n  font-weight: 400;\n\n  :focus,\n  :active {\n    outline: 3px solid #f8b602;\n  }\n\n  :not(:placeholder-shown) {\n    border: ${prop => (prop.error ? '3px solid red' : '3px solid green')};\n  }\n`;\n\nexport const InputErrorMessage = styled.p`\n  font-size: 16px;\n  color: red;\n`;\n","import * as Yup from 'yup';\nimport { useFormik } from 'formik';\n\nimport { useGlobal } from '../../GlobalContext';\nimport { fetchLogin } from '../../helpers/fetchAPI';\n\nimport { AuthLayout } from 'components/AuthLayout/AuthLayout';\nimport { Button } from '../../components/Button/Button';\nimport {\n  FormContainer,\n  LabelThumb,\n  Label,\n  Input,\n  InputErrorMessage,\n} from './LoginPage.styled';\n\nconst LoginPage = () => {\n  const { logIn } = useGlobal();\n\n  const LoginSchema = Yup.object().shape({\n    email: Yup.string()\n      .matches(/^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/, {\n        message: 'Invalid email',\n        excludeEmptyString: true,\n      })\n      .required('Required'),\n    password: Yup.string()\n      .matches(/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/, {\n        message:\n          'Password should contain minimum eight characters, at least one letter and one number',\n        excludeEmptyString: true,\n      })\n      .required('Required'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      email: 'abba@baab.com',\n      password: 'qwe12345',\n    },\n    validationSchema: LoginSchema,\n    onSubmit: async values => {\n      const { _id, name, email, phone, address, refresh_token } =\n        await fetchLogin(values);\n      logIn(_id, name, email, phone, address, refresh_token);\n    },\n  });\n  return (\n    <AuthLayout layout=\"login\">\n      <FormContainer onSubmit={formik.handleSubmit}>\n        <LabelThumb>\n          <Label>\n            Email\n            <Input\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"johndou@mail.com\"\n              value={formik.values.email}\n              onChange={formik.handleChange}\n              error={formik.errors['email']}\n            />\n            {formik.touched['email'] && (\n              <InputErrorMessage>{formik.errors['email']}</InputErrorMessage>\n            )}\n          </Label>\n          <Label>\n            Password\n            <Input\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Enter your password here\"\n              value={formik.values.password}\n              onChange={formik.handleChange}\n              error={formik.errors['password']}\n            />\n            {formik.touched['password'] && (\n              <InputErrorMessage>{formik.errors['password']}</InputErrorMessage>\n            )}\n          </Label>\n        </LabelThumb>\n        <Button type=\"submit\">Submit</Button>\n      </FormContainer>\n    </AuthLayout>\n  );\n};\n\nexport default LoginPage;\n"],"names":["Container","styled","BigColumn","BgThumb","prop","layout","image_reg","image","bigImage_reg","bigImage","SmallColumn","AuthLayout","children","Button","type","onClick","isActive","FormContainer","LabelThumb","Label","Input","error","InputErrorMessage","logIn","useGlobal","LoginSchema","Yup","shape","email","matches","message","excludeEmptyString","required","password","formik","useFormik","initialValues","validationSchema","onSubmit","values","fetchLogin","_id","name","phone","address","refresh_token","handleSubmit","placeholder","value","onChange","handleChange","errors","touched"],"sourceRoot":""}